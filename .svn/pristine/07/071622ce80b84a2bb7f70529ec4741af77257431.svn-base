package com.ssv.ssvwifitool;

import android.app.Activity;
import android.content.Context;
import android.nfc.Tag;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.ToggleButton;

import com.ssv.ssvwifitool.chip.ui.ScalButton;

import java.text.DecimalFormat;
import java.util.HashMap;

public class RXFragment extends Fragment{
	private final String TAG = "SSV";
    private View ControlRegFragmentView = null;
    private WlanAttributes attr = new WlanAttributes();
    
    //private View TempView = null;
    private Spinner spinnerChLst;
    private Spinner spinnerModeLst;
    private Spinner spinnerRateLst;

    private Button resetBtn;
	private TextView txtResult;

	private ScalButton startBtn;
	private boolean isStart = false;
    
    //private Spinner spinnerClk;
    
    private ArrayAdapter<CharSequence> adapterTRX;
    private ArrayAdapter<CharSequence> adapterChLst;
    private ArrayAdapter<CharSequence> adapterModeLst;
    private ArrayAdapter<CharSequence> adapterRateLst;
	private ArrayAdapter<CharSequence> adapterBwLst;
    private ArrayAdapter<CharSequence> adapterDACLst;
    
    private String[] mChannelArray;
    private String[] mRateArray;
    private String[] mModeArray;
    private String[] mDACArray;
    
    private Button btnIQPhaseUp, btnIQPhaseDown;
    private Button btnIQAmpUp, btnIQAmpDown;
    private Button btnFreqOffsetUp, btnFreqOffsetDown;
    
    private EditText etIQPhase, etIQAmp, etFreqOffset;

    private LinearLayout bw40_layout;
    private Spinner spBw40;

	private TextView txtPtk;
	private TextView txtErrRate;
	private TextView txtErrCount;
	private TextView txtRssi;
    
    HashMap<String, String> wlanMap = new HashMap<String, String>();
    
    private ToggleButton togglebuttonRX;
	private EditText ediTimerInt;
    
    Context context;
	private Thread timerThread;
    
    private Handler mHandler=new Handler();
    private Handler mThreadHandler;
    private HandlerThread mThread;
    
	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		Log.d("=====>", "ControlRegFragment onAttach");
		
		MainActivity mainActivity = (MainActivity)activity;

	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		ControlRegFragmentView = inflater.inflate(R.layout.rx_control_panel, container, false);
		//TempView = inflater.inflate(R.layout.frg_reg_view, container, false);
		
		context = ControlRegFragmentView.getContext();

		/* tx or rx */
		//radioClk = (RadioGroup)ControlRegFragmentView.findViewById(R.id.radioClock);

		/* Channel List */
		mChannelArray = getResources().getStringArray(R.array.channel_list_of_twog);
		spinnerChLst = (Spinner)ControlRegFragmentView.findViewById(R.id.spChannel);
		adapterChLst = ArrayAdapter.createFromResource(context,
		            R.array.channel_list_of_twog, android.R.layout.simple_list_item_activated_1);
		spinnerChLst.setAdapter(adapterChLst);
        //int SpinnerPostion = adapterChLst.getPosition("");
        //spinnerChLst.setSelection(adapterChLst.getCount()-1);		
		
		/* Mode List */	
		spinnerModeLst = (Spinner)ControlRegFragmentView.findViewById(R.id.spMode);
		adapterModeLst = ArrayAdapter.createFromResource(context,
		            R.array.mode_list, android.R.layout.simple_list_item_activated_1);
		spinnerModeLst.setAdapter(adapterModeLst);
		
		/* Rate List */
		mRateArray = getResources().getStringArray(R.array.rate_list_of_b);
		spinnerRateLst = (Spinner)ControlRegFragmentView.findViewById(R.id.spRate);
		adapterRateLst = ArrayAdapter.createFromResource(context,
		            R.array.rate_list_of_b, android.R.layout.simple_list_item_activated_1);
		spinnerRateLst.setAdapter(adapterRateLst);

		bw40_layout = (LinearLayout) ControlRegFragmentView.findViewById(R.id.layout_bw40);


		spBw40 = (Spinner)ControlRegFragmentView.findViewById(R.id.spBw);
		adapterBwLst = ArrayAdapter.createFromResource(context,
				R.array.bw_list, android.R.layout.simple_list_item_activated_1);
		spBw40.setAdapter(adapterBwLst);

		
		/* TX on/off btn */
//		togglebuttonRX = (ToggleButton)ControlRegFragmentView.findViewById(R.id.toggleRx);
		startBtn = ControlRegFragmentView.findViewById(R.id.startBtn);


		resetBtn = ControlRegFragmentView.findViewById(R.id.btnRest);
		resetBtn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				String ret = attr.resetRxCounters();
				txtResult.setText(ret);
				txtPtk.setText(R.string.zero);
				txtErrCount.setText(R.string.zero);
				txtErrRate.setText(R.string.zero);
			}
		});
		ediTimerInt = ControlRegFragmentView.findViewById(R.id.timerEdit);
		txtResult = ControlRegFragmentView.findViewById(R.id.textContent);

		txtPtk = ControlRegFragmentView.findViewById(R.id.txtPtkShow);
		txtErrCount = ControlRegFragmentView.findViewById(R.id.txtErrShow);
		txtErrRate = ControlRegFragmentView.findViewById(R.id.txtErrRateShow);
		txtRssi = ControlRegFragmentView.findViewById(R.id.txtRSSIShow);

		constructingWlanMap();
		
		return ControlRegFragmentView;
	}

	private Handler timerHandler = new Handler() {
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			HashMap<String,String> count = attr.updateCounts();
			Log.d(TAG,count.toString());
//			Log.d(TAG,count.get("count"));

			if (count.size() >= 3){
				txtPtk.setText(count.get("count").toString());
				txtErrCount.setText(count.get("err").toString());
				txtErrRate.setText(count.get("err_rate").toString());
			}
			txtRssi.setText(attr.getRssi());

		}
	};

	private class TimerThread extends Thread {
		@Override
		public void run() {
			// TODO Auto-generated method stub
			super.run();
			try {
				while (true) {
					Message msg = new Message();
					timerHandler.sendMessage(msg);
					int intval = Integer.parseInt(ediTimerInt.getText().toString());
					if(intval < 200)
						intval = 200;
					Thread.sleep(intval);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void setBtnStatus(boolean start){
		if(start){
			startBtn.setBackgroundResource(R.drawable.sending);
			startBtn.setText("");
			startBtn.startScal();
		}else{
			startBtn.stopScal();
			startBtn.setBackgroundResource(R.drawable.button_style);
			startBtn.setText(R.string.tx_on);
		}

	}

	public class btnOnClickListen implements View.OnClickListener{

		@Override
		public void onClick(View view) {
			if(isStart == false){
				isStart = true;
				setBtnStatus(isStart);
				timerThread = new TimerThread();
				String ret = attr.startRx(true);
				txtResult.setText(ret);
				timerThread.start();
			}else {
				isStart = false;
				setBtnStatus(isStart);
				String ret = attr.startRx(false);
				txtResult.setText(ret);
				timerThreadStop();
			}
		}
	}
	
	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		//radioClk.setOnCheckedChangeListener(new addRadioOnCheckedChangeListener());
		spinnerChLst.setOnItemSelectedListener(new addSpOnItemSelectedListener());
		spinnerModeLst.setOnItemSelectedListener(new addSpOnItemSelectedListener());
		spinnerRateLst.setOnItemSelectedListener(new addSpOnItemSelectedListener());
//		togglebuttonRX.setOnCheckedChangeListener(new addTgOnCheckedChangeListener());
		spBw40.setOnItemSelectedListener(new addSpOnItemSelectedListener());
		startBtn.setOnClickListener(new RXFragment.btnOnClickListen());
	}
	

	
	private void constructingWlanMap() {
		mapping(R.array.ref_clk, R.array.ref_clk_values);
		mapping(R.array.channel_list_of_twog, R.array.channel_list_of_twog_values);
		mapping(R.array.mode_list, R.array.mode_list_values);
		mapping(R.array.rate_list_of_b, R.array.rate_list_of_b_values);
		mapping(R.array.rate_list_of_ag, R.array.rate_list_of_ag_values);
		mapping(R.array.rate_list_of_n_ht20, R.array.rate_list_of_n_ht20_values);
		mapping(R.array.rate_list_of_n_ht40, R.array.rate_list_of_n_ht40_values);
		mapping(R.array.channel_list_of_fiveg, R.array.channel_list_of_fiveg_values);
		mapping(R.array.bw_list, R.array.bw_list_values);
	}
	
	private void mapping(int id, int idValue) {
		String[] mStringArray;
		String[] mStringArrayValue;
		mStringArray = getResources().getStringArray(id);
		mStringArrayValue =	getResources().getStringArray(idValue);
		for (int i = 0; i < mStringArray.length; i++) {
			wlanMap.put(mStringArray[i], mStringArrayValue[i]);
		}
	}
	
	private void dumpWlanMap() {
        for (Object key : wlanMap.keySet()) {
            Log.d(TAG, "HashMap: " + key + "\t==>\t" + wlanMap.get(key));
        }
	}
	
	/*
	public class addRadioOnCheckedChangeListener implements RadioGroup.OnCheckedChangeListener {
		public void onCheckedChanged(RadioGroup group, int checkedId) {
			switch (checkedId) {
			case R.id.radio24M:
				Log.d(TAG, "Radio 24 MHz");
				attr.setRefClk(24);
				break;
			case R.id.radio26M:
				Log.d(TAG, "Radio 26 MHz");
				attr.setRefClk(26);
				break;
			}
	    }
	}
	*/
	
	public class addTgOnCheckedChangeListener implements CompoundButton.OnCheckedChangeListener{
	    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
			Log.d(TAG, "RX ischecked "+isChecked);
			String ret;
			if (isChecked) {
				timerThread = new TimerThread();
				ret = attr.startRx(true);

				timerThread.start();
			}
			else {
				timerThreadStop();
				ret = attr.startRx(false);
			}
			txtResult.setText(ret);
	    }
	}

	public class addSpOnItemSelectedListener implements AdapterView.OnItemSelectedListener {
		public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {

            String selectedItem = parent.getItemAtPosition(pos).toString();
            int wlanKeyValue = Integer.parseInt(wlanMap.get(selectedItem));
			String ret =new String("");
			//check which spinner triggered the listener
            switch (parent.getId()) {
            case R.id.spChannel:
            	Log.d(TAG, "Channel: pos "+pos+", selectedItem "+selectedItem+", key "+wlanKeyValue);

            	ret = attr.setChannel(wlanKeyValue);
				txtResult.setText(ret);
                break;

            case R.id.spMode:
				int prev_mode = attr.getMode();
				Log.d(TAG, "Mode: pos "+pos+" prev_mode "+prev_mode);
				attr.setMode(pos);

				if (pos == WlanAttributes.B_MODE) {
					bw40_layout.setVisibility(View.INVISIBLE);
					mRateArray = getResources().getStringArray(R.array.rate_list_of_b);
					adapterRateLst = ArrayAdapter.createFromResource(context,
							R.array.rate_list_of_b, android.R.layout.simple_list_item_activated_1);
				}
				else if (pos == WlanAttributes.G_MODE || pos == WlanAttributes.A_MODE) {
					bw40_layout.setVisibility(View.INVISIBLE);
					mRateArray = getResources().getStringArray(R.array.rate_list_of_ag);
					adapterRateLst = ArrayAdapter.createFromResource(context,
							R.array.rate_list_of_ag, android.R.layout.simple_list_item_activated_1);
				}
				else {
					bw40_layout.setVisibility(View.VISIBLE);

					int bw_pos = spBw40.getSelectedItemPosition();

					if(bw_pos == WlanAttributes.BW_20){
						mRateArray = getResources().getStringArray(R.array.rate_list_of_n_ht20);
						adapterRateLst = ArrayAdapter.createFromResource(context,
								R.array.rate_list_of_n_ht20, android.R.layout.simple_list_item_activated_1);
					}else{
						mRateArray = getResources().getStringArray(R.array.rate_list_of_n_ht40);
						adapterRateLst = ArrayAdapter.createFromResource(context,
								R.array.rate_list_of_n_ht40, android.R.layout.simple_list_item_activated_1);
					}

				}

				spinnerRateLst.setAdapter(adapterRateLst);

				//2G
				if (pos <= WlanAttributes.N_MODE) {


					//5G ->2G
					if (prev_mode >= WlanAttributes.A_MODE ||
							//HT40 -> HT20
							(prev_mode == WlanAttributes.N_MODE && attr.getBW() == WlanAttributes.BW_40
									&& pos < WlanAttributes.N_MODE)) {

						mChannelArray = getResources().getStringArray(R.array.channel_list_of_twog);
						adapterChLst = ArrayAdapter.createFromResource(context,
								R.array.channel_list_of_twog, android.R.layout.simple_list_item_activated_1);
						spinnerChLst.setAdapter(adapterChLst);
					} else if (attr.getBW() == WlanAttributes.BW_40 && pos == WlanAttributes.N_MODE
							) {
						mChannelArray = getResources().getStringArray(R.array.channel_list_of_twog_ht40);
						adapterChLst = ArrayAdapter.createFromResource(context,
								R.array.channel_list_of_twog_ht40, android.R.layout.simple_list_item_activated_1);
						spinnerChLst.setAdapter(adapterChLst);

					}
				}

        		break;
			case R.id.spBw:
				Log.d(TAG, "Band width: pos "+pos);
				if(attr.getMode() != attr.N_MODE){
					return;
				}
				if (pos == WlanAttributes.BW_20) {
					attr.setBW(WlanAttributes.BW_20);
					mRateArray = getResources().getStringArray(R.array.rate_list_of_n_ht20);
					adapterRateLst = ArrayAdapter.createFromResource(context,
							R.array.rate_list_of_n_ht20, android.R.layout.simple_list_item_activated_1);

					mChannelArray = getResources().getStringArray(R.array.channel_list_of_twog);
					adapterChLst = ArrayAdapter.createFromResource(context,
							R.array.channel_list_of_twog, android.R.layout.simple_list_item_activated_1);

				}else{
					attr.setBW(WlanAttributes.BW_40);
					mRateArray = getResources().getStringArray(R.array.rate_list_of_n_ht40);
					adapterRateLst = ArrayAdapter.createFromResource(context,
							R.array.rate_list_of_n_ht40, android.R.layout.simple_list_item_activated_1);

					mChannelArray = getResources().getStringArray(R.array.channel_list_of_twog_ht40);
					adapterChLst = ArrayAdapter.createFromResource(context,
							R.array.channel_list_of_twog_ht40, android.R.layout.simple_list_item_activated_1);

				}
				spinnerChLst.setAdapter(adapterChLst);
				spinnerRateLst.setAdapter(adapterRateLst);
				break;


            case R.id.spRate:
            	Log.d(TAG, "Rate: pos "+pos);
				ret = attr.setDataRate(wlanKeyValue);
				txtResult.setText(ret);
                break;
            }

        }

        public void onNothingSelected(AdapterView<?> parent) {
            // Do nothing.
        }
	}

	void timerThreadStop() {
		if (timerThread != null) {
			if (!timerThread.isInterrupted()) {
				timerThread.interrupt();
			}
		}
	}
	
	@Override
	public void onDestroy(){
       	super.onDestroy();
       	Log.d(TAG, "onDestroy");

//		WifiStatusControl.setWifiUnload();
       
    }

	@Override
	public void onStop(){
       super.onStop();
       Log.d(TAG, "onStop");
		timerThreadStop();
       attr.startRx(false);
    }

	@Override
	public void onPause() {
		super.onPause();
		isStart = false;
		setBtnStatus(isStart);
		timerThreadStop();
		attr.startRx(false);
	}
}
